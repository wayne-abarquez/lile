(function () {
    'use strict';

    angular
        .module('demoApp', ['ngMaterial', 'ngAnimate', 'oitozero.ngSweetAlert', 'treasure-overlay-spinner', 'vAccordion'])

        .constant('APP_NAME', 'Lile International')
        .constant('BASE_URL', window.location.origin)
        .constant('DEST_MARKER_BASE_PATH', '/resources/images/markers/destinations/')

        .config(["$mdThemingProvider", function ($mdThemingProvider) {
            $mdThemingProvider.theme('default')
                .primaryPalette('red')
                .accentPalette('pink');
        }]);

}());

(function(){
'use strict';

angular.module('demoApp')
    .factory('zoneServices', ['gmapServices', 'ZONES', zoneServices]);

    function zoneServices (gmapServices, ZONES) {
        var service = {};

        var zoneInfowindow = gmapServices.createInfoWindow('');

        var zonePolyOpts = {
            fillOpacity: 0.3,
            strokeOpacity: 0.5,
            strokeWeight: 0.5
        };

        service.zones = [];

        service.initialize = initialize;
        service.toggleZones = toggleZones;
        service.getZoneNoForLatLng = getZoneNoForLatLng;
        service.getZoneColor = getZoneColor;

        function initialize () {
            loadZones();
        }

        function loadZones() {
            ZONES.forEach(function (zone) {
                createZone(zone);
            });
        }

        function createZone(zone){
            var polyOpts = angular.extend(zonePolyOpts, {
                strokeColor: zone.color,
                fillColor: zone.color
            });
            var poly = gmapServices.createPolygon(zone.path, polyOpts);

            gmapServices.hidePolygon(poly);

            gmapServices.addListener(poly, 'click', function () {
                zoneInfowindow.setContent('<h2><b>Zone ' + zone.name + '</b></h2>');
                zoneInfowindow.setPosition(gmapServices.getPolygonCenter(this));
                gmapServices.showInfoWindow(zoneInfowindow);
            });

            service.zones.push({
                id: zone.id,
                name: zone.name,
                polygon: poly
            });
        }

        function toggleZones(zoneNumber) {
            var foundZone = _.findWhere(service.zones, {name: zoneNumber});
            if(foundZone) {
                if(foundZone.polygon && foundZone.polygon.getMap()) {
                    gmapServices.hidePolygon(foundZone.polygon);
                } else {
                    gmapServices.showPolygon(foundZone.polygon);
                }
            }
        }

        function getZoneNoForLatLng (latLng) {
            var zoneNo = false;
            service.zones.forEach(function(z){
                if(gmapServices.isLocationWithinPolygon(latLng, z.polygon)) {
                    zoneNo = z.name;
                    return;
                }
            });
            return zoneNo;
        }

        function getZoneColor (zoneNo) {

            var foundZone = _.findWhere(ZONES, {name: zoneNo.toString()});
            return foundZone.color;
        }

        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .factory('truckServices', ['TRUCK_HQ', 'TRUCK_ICON', 'gmapServices',  truckServices]);

    function truckServices (TRUCK_HQ, TRUCK_ICON, gmapServices) {
        var service = {};

        service.trucks = [];

        service.initialize = initialize;
        service.toggleTrucks = toggleTrucks;
        service.getTruckByZoneNo = getTruckByZoneNo;
        service.showTruckByZoneNo = showTruckByZoneNo;
        service.hideTrucks = hideTrucks;

        function initialize () {
            loadTrucks();
        }

        function loadTrucks() {
            TRUCK_HQ.forEach(function(truck){
                angular.extend(truck, {
                    marker: gmapServices.initMarker(truck.location, TRUCK_ICON)
                });
                gmapServices.hideMarker(truck.marker);
                service.trucks.push(truck);
            });

        }

        function toggleTrucks () {
            service.trucks.forEach(function (truck) {
                if(truck.marker && truck.marker.getMap()) {
                    gmapServices.hideMarker(truck.marker);
                } else {
                    gmapServices.showMarker(truck.marker);
                }
                return;
            });
        }

        function hideTrucks () {
            service.trucks.forEach(function (truck) {
                if (truck.marker && truck.marker.getMap()) {
                    gmapServices.hideMarker(truck.marker);
                }
                return;
            });
        }

        function getTruckByZoneNo (zoneNo) {
            return _.findWhere(service.trucks, {zone_id: parseInt(zoneNo)});
        }

        function showTruckByZoneNo (zoneNo) {
            var truck = service.getTruckByZoneNo(zoneNo);
            gmapServices.showMarker(truck.marker);
        }

        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .factory('routePlannerService', ['DEST_MARKER_BASE_PATH', '$rootScope', '$timeout', 'gmapServices', 'zoneServices', 'truckServices', 'alertServices', routePlannerService]);

    function routePlannerService (DEST_MARKER_BASE_PATH, $rootScope, $timeout, gmapServices, zoneServices, truckServices, alertServices) {
        var service = {};

        var autocompleteDestination;
        var selectedPlace = {
            latLng: null
        };

        var zoneNo = 1;

        var dropDestinationListener;
        service.destinationCtr = {};
        service.destinations = {};

        service.initialize = initialize;
        service.clearRoutes = clearRoutes;
        service.endService = endService;
        service.removeDestination = removeDestination;
        service.addPlaceDestination = addPlaceDestination;
        service.calculateFastestRoundtrip = calculateFastestRoundtrip;
        service.calculateFastestAZTrip = calculateFastestAZTrip;

        function initialize () {
            autocompleteDestination = gmapServices.initializeAutocomplete('destination-address-input');
            autocompleteDestination.addListener('place_changed', destinationAutocompleteChangeCallback);
            // set cursor to crosshair
            gmapServices.setMapTargetCursor();
            // initialize destination adding when map is clicked
            activateDropDestinationPoints();
        }

        function activateDropDestinationPoints() {
            dropDestinationListener = gmapServices.addMapListener('click', function (e) {
                pushDestination(e.latLng);
            });
        }

        function pushDestination (latLng) {
            var zoneNo = zoneServices.getZoneNoForLatLng(latLng);

            if (zoneNo !== false) {
                var ctr = generateDestinationNumber(zoneNo);
                var icon = generateDestinationMarker(ctr, zoneNo);

                var data = {
                    number: ctr,
                    coordinates: latLng,
                    marker: gmapServices.initMarker(latLng, icon)
                };

                addDestination(data, zoneNo);
            } else {
                alertServices.showZoneLocationInvalid();
            }
        }

        function addPlaceDestination () {
            if (selectedPlace.latLng) {
                pushDestination(selectedPlace.latLng);

                selectedPlace.latLng = null;
            } else {
                alert('Please Enter a Location');
            }
        }

        function addDestination(data, zoneNo) {
            if (!service.destinations[zoneNo]) service.destinations[zoneNo] = [];

            service.destinations[zoneNo].push(data);

            $rootScope.$broadcast('new-destination', {zone: zoneNo, destination: data});
        }

        function removeDestination(destNo, zoneNo) {
            if (!service.destinations[zoneNo]) return;

            service.destinations[zoneNo].forEach(function(destination, index){
                if(destination.number == destNo) {
                    gmapServices.hideMarker(destination.marker);
                    service.destinations[zoneNo].splice(index, 1);
                    return;
                }
            });

            updateDestinations(zoneNo);
        }

        function updateDestinations(zoneNo) {
            service.destinations[zoneNo].forEach(function (destination, index) {
                var newNo = index + 1;
                destination.number = newNo;
                destination.marker.setIcon(generateDestinationMarker(newNo, zoneNo));
            });
        }

        function clearRoutes() {
            for(var zoneNo in service.destinations) {
                if(service.destinations[zoneNo] && service.destinations[zoneNo].length) {
                    service.destinations[zoneNo].forEach(function (d) {
                        gmapServices.hideMarker(d.marker);
                    });
                }
            }

            service.destinations = {};

            for (var zoneNo in service.destinationCtr) {
                if(service.destinationCtr[zoneNo]) {
                    service.destinationCtr[zoneNo] = 0;
                }
            }

            for (var zoneNo in directionsRenderers) {
                if(directionsRenderers[zoneNo] && directionsRenderers[zoneNo].getMap()) {
                    directionsRenderers[zoneNo].setMap(null);
                }
            }

            zoneNo = 1;
            truckServices.hideTrucks();
            //gmapServices.tsp.startOver();
        }

        function terminateDestinationListener() {
            gmapServices.removeListener(dropDestinationListener);
            dropDestinationListener = null;
        }

        function endService() {
            terminateDestinationListener();
            gmapServices.setMapDefaultCursor();
        }

        function generateDestinationNumber(zoneNo) {
            if (!service.destinations[zoneNo]) service.destinations[zoneNo] = [];

            return service.destinations[zoneNo].length + 1;
        }

        function generateDestinationMarker(destCtr, zoneNo) {
            return DEST_MARKER_BASE_PATH + zoneNo + '/number_' + destCtr + '.png';
        }


        /* PLACE FUNCTIONS */

        function destinationAutocompleteChangeCallback() {
            var place = autocompleteDestination.getPlace();
            if (!place.geometry) {
                alert("Autocomplete's returned place contains no geometry");
                return;
            }

            selectedPlace.latLng = place.geometry.location;

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                gmapServices.map.fitBounds(place.geometry.viewport);
            } else {
                gmapServices.map.setCenter(selectedPlaceCoordinates);
                gmapServices.map.setZoom(15);
            }
        }

        /* Calculate Route Functions */

        var directionsRenderers = {};

        //function calculateRoute (solveFunc) {
        //    for (var zoneNo in service.destinations) {
        //        // If directions renderer not instantiated
        //        // initialize it for each zones
        //        // directionsRenderer with different poly colors based on the zones
        //        if (!directionsRenderers[zoneNo]) {
        //            var polyColor = zoneServices.getZoneColor(zoneNo);
        //            directionsRenderers[zoneNo] = gmapServices.createDirectionsRenderer(polyColor);
        //        }
        //
        //        // get the truck location per zone
        //        // and push to first index
        //        var truck = truckServices.getTruckByZoneNo(zoneNo);
        //
        //        // sort destination based on the order numbering
        //        //var sortedDestinations = _.sortBy(service.destinations[zoneNo], 'number');
        //        var sortedDestinations = service.destinations[zoneNo].slice();
        //
        //        sortedDestinations.unshift({
        //            coordinates: gmapServices.castLatLngLitToObj(truck.location)
        //        });
        //
        //        //gmapServices.tsp.removeWaypoints();
        //        gmapServices.tsp.startOver();
        //
        //        // Add waypoints on tsp service
        //        sortedDestinations.forEach(function (dest) {
        //            gmapServices.tsp.addWaypoint(dest.coordinates, function () {});
        //        });
        //
        //        // show trucks per zone
        //        solveFunc(zoneNo);
        //    }
        //}

        function processCoordinates (truckLatLng, coords) {
            var waypoints = [];

            coords.forEach(function(coords){
                waypoints.push({
                    location: coords.coordinates,
                    stopover: true
                });
            });

            var truckLocation = gmapServices.castLatLngLitToObj(truckLatLng);

            return {
                origin: truckLocation,
                destination: truckLocation,
                waypoints: waypoints
            };
        }


        function calculateRoute(solveFunc) {
            if(zoneNo > 6) {
                zoneNo = 1;
                return;
            }

            try {
            //for (var zoneNo in service.destinations) {
                // If directions renderer not instantiated
                // initialize it for each zones
                // directionsRenderer with different poly colors based on the zones
                if (!directionsRenderers[zoneNo]) {
                    var polyColor = zoneServices.getZoneColor(zoneNo);
                    directionsRenderers[zoneNo] = gmapServices.createDirectionsRenderer(polyColor);
                } else {
                    if(directionsRenderers[zoneNo] && !directionsRenderers[zoneNo].getMap()) {
                        directionsRenderers[zoneNo].setMap(gmapServices.map);
                    }
                }

                // get the truck location per zone
                // and push to first index
                var truck = truckServices.getTruckByZoneNo(zoneNo);

                // sort destination based on the order numbering
                //var sortedDestinations = _.sortBy(service.destinations[zoneNo], 'number');
                var sortedDestinations = service.destinations[zoneNo].slice();

                var destLocations = processCoordinates(truck.location, sortedDestinations);

                truckServices.showTruckByZoneNo(zoneNo);
                gmapServices.computeRoute(destLocations, directionsRenderers[zoneNo])
                    .finally(function(){
                        zoneNo++;
                        calculateRoute(solveFunc);
                    });

                //sortedDestinations.unshift({
                //    coordinates: gmapServices.castLatLngLitToObj(truck.location)
                //});

                //gmapServices.tsp.removeWaypoints();
                //gmapServices.tsp.startOver();

                // Add waypoints on tsp service
                //sortedDestinations.forEach(function (dest) {
                //    gmapServices.tsp.addWaypoint(dest.coordinates, function () {
                //    });
                //});

                // show trucks per zone
                solveFunc(zoneNo);
            //}
            } catch (err) {
                zoneNo++;
                calculateRoute(solveFunc);
            }
        }


        function calculateFastestRoundtrip () {
            var solveFunction = function (zoneNo) {
                //gmapServices.tsp.solveRoundTrip(function (tsp) {
                //    var dir = gmapServices.tsp.getGDirections();
                //    directionsRenderers[zoneNo].setDirections(dir);
                //});
            };

            calculateRoute(solveFunction);

            console.log('calculateFastestRoundtrip');
        }

        function calculateFastestAZTrip () {
            var solveFunction = function (zoneNo) {
                //gmapServices.tsp.solveAtoZ(function (tsp) {
                //    var dir = gmapServices.tsp.getGDirections();
                //    directionsRenderers[zoneNo].setDirections(dir);
                //});
            };

            calculateRoute(solveFunction);

            console.log('calculateFastestAZTrip');
        }


        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .factory('loaderServices', ['$rootScope', loaderServices]);

    function loaderServices ($rootScope) {
        var service = {};

        service.showLoader = showLoader;
        service.hideLoader = hideLoader;

        function showLoader () {
            $rootScope.spinner.active = true;
        }

        function hideLoader (_doApply) {
            var doApply = _doApply || false;
            if(doApply) {
                $rootScope.$apply(function () {
                    $rootScope.spinner.active = false;
                });
            } else {
                $rootScope.spinner.active = false;
            }
        }
        

        return service;
    }
}());
(function(){
    'use strict';

    angular.module('demoApp')
        .factory('gmapServices', ['$log', '$q', gmapServices]);

    function gmapServices($log, $q) {
        var service = {};

        //infowindow balloons
        service.INFO_WINDOWS = [];

        service.ZOOM_OUT_LEVEL = 12;
        service.ZOOM_IN_LEVEL = 17;

        service.map = null;
        service.mapProjection = null;
        service.overlayView = null;

        service.geocoder = null;

        service.directionsService = null;
        service.directionsRenderer = null;
        service.tsp = null;

        service.markers = [];

        service.defaultZoom = service.ZOOM_OUT_LEVEL;

        service.defaultLatLng = new google.maps.LatLng(47.6002767, -122.3228178);

        // Cluster Objects
        // for Different Layers
        service.markerClusterers = {};

        // Maintain only one infobox
        // Prevent from opening multiple infoboxes
        service.lastInfoboxOpen = null;
        service.infoboxes = [];

        /**
         * Service Functions
         */
        service.apiAvailable = apiAvailable;
        service.createMap = createMap;
        service.createInfoBox = createInfoBox;
        service.openInfoBox = openInfoBox;
        service.closeInfoBox = closeInfoBox;
        service.closeAllInfoBox = closeAllInfoBox;
        service.setMapCursorCrosshair = setMapCursorCrosshair;
        service.setMapBounds = setMapBounds;
        service.getBoundsFromPath = getBoundsFromPath;
        service.setMapCursorDefault = setMapCursorDefault;
        service.addMapListener = addMapListener;
        service.getDistanceOfPath = getDistanceOfPath;
        service.fromLatLngToContainerPixel = fromLatLngToContainerPixel;
        service.fromLatLngToDivPixel = fromLatLngToDivPixel;
        service.fromLatLngToPoint = fromLatLngToPoint;
        service.createCoordinate = createCoordinate;
        service.createInfoWindow = createInfoWindow;
        service.createCanvasInfoWindow = createCanvasInfoWindow;
        service.hideCanvasInfoWindow = hideCanvasInfoWindow;
        service.showInfoWindow = showInfoWindow;
        service.hideInfoWindow = hideInfoWindow;
        service.clearInstanceListeners = clearInstanceListeners;
        service.initMarker = initMarker;
        service.createMarker = createMarker;
        service.createCustomMarker = createCustomMarker;
        service.createCircleMarker = createCircleMarker;
        service.panTo = panTo;
        service.panToOffsetLeft = panToOffsetLeft;
        service.showMarker = showMarker;
        service.showMarkers = showMarkers;
        service.hideMarker = hideMarker;
        service.hideMarkers = hideMarkers;
        service.destroyMarker = destroyMarker;
        service.destroyPolyline = destroyPolyline;
        service.centerMarker = centerMarker;
        service.setMapCenter = setMapCenter;
        service.setMapCenterDefault = setMapCenterDefault;
        service.setZoom = setZoom;
        service.setZoomIfGreater = setZoomIfGreater;
        service.setZoomDefault = setZoomDefault;
        service.setZoomInDefault = setZoomInDefault;
        service.createDrawingManager = createDrawingManager;
        service.createDrawingToolsManager = createDrawingToolsManager;
        service.showDrawingManager = showDrawingManager;
        service.hideDrawingManager = hideDrawingManager;
        service.setEnableDrawingManager = setEnableDrawingManager;
        service.createCircle = createCircle;
        service.updateCircle = updateCircle;
        service.initPolygon = initPolygon;
        service.createPolygon = createPolygon;
        service.updatePolygon = updatePolygon;
        service.showPolygon = showPolygon;
        service.hidePolygon = hidePolygon;
        service.resetPolygonFill = resetPolygonFill;
        service.fillPolygon = fillPolygon;
        service.getPolygonCenter = getPolygonCenter;
        service.panToPolygon = panToPolygon;
        service.isLocationWithinPolygon = isLocationWithinPolygon;
        service.createPolyline = createPolyline;
        service.createDashedPolyline = createDashedPolyline;
        service.updatePolyline = updatePolyline;
        service.showPolyline = showPolyline;
        service.hidePolyline = hidePolyline;
        service.addListener = addListener;
        service.addListenerOnce = addListenerOnce;
        service.clearInstanceListeners = clearInstanceListeners;
        service.clearListeners = clearListeners;
        service.removeListener = removeListener;
        service.trigger = trigger;
        service.showCurrentLocation = showCurrentLocation;
        service.reverseGeocode = reverseGeocode;
        service.loadKMLByURL = loadKMLByURL;
        service.initMapClusterer = initMapClusterer;
        service.destroyMapClusterer = destroyMapClusterer;
        service.createClusterMarker = createClusterMarker;
        service.getClustererInstance = getClustererInstance;
        service.clearClusterMarkers = clearClusterMarkers;
        service.resetClusters = resetClusters;
        service.insertImageMapType = insertImageMapType;
        service.removeOverlayAtIndex = removeOverlayAtIndex;
        service.initializeAutocomplete = initializeAutocomplete;
        service.containsLocation = containsLocation;
        service.triggerEvent = triggerEvent;
        service.setMapDefaultCursor = setMapDefaultCursor;
        service.setMapTargetCursor = setMapTargetCursor;
        service.createDirectionsRenderer = createDirectionsRenderer;
        service.castLatLngLitToObj = castLatLngLitToObj;

        function apiAvailable() {
            return typeof window.google === 'object';
        }

        function createMap(mapId) {
            var mapIdLoc = mapId || 'map3d';
            var myMapId = '#' + mapIdLoc;

            if (service.map) return service.map;
            if (!service.apiAvailable()) return null;

            var mapOptions = {
                zoom: service.defaultZoom,
                minZoom: 2,
                center: service.defaultLatLng,
                mapTypeId: google.maps.MapTypeId.MAP,
                mapTypeControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_TOP
                },
                zoomControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_BOTTOM
                },
                panControl: false,
                clickableIcons: false
            };

            $(myMapId).height($(window).height() - (42));

            service.map = new google.maps.Map(document.getElementById(mapIdLoc), mapOptions);

            loadDirectionsService();

            // handle window resize event
            google.maps.event.addDomListener(window, 'resize', function () {
                $(myMapId).height($(window).height() - (42));
                var center = service.map.getCenter();
                google.maps.event.trigger(service.map, 'resize');
                service.map.setCenter(center);
            });

            return service.map;
        }

        function loadDirectionsService() {
            service.directionsService = new google.maps.DirectionsService;
            //service.directionsRenderer = new google.maps.DirectionsRenderer({map: service.map});
            var directionsPanel = document.createElement("div");
            service.tsp = new BpTspSolver(service.map, directionsPanel);
            service.tsp.setTravelMode(google.maps.DirectionsTravelMode.DRIVING);
        }

        function createDirectionsRenderer (polyColor) {
            var opts = {
                polylineOptions: {
                    strokeColor: polyColor,
                    strokeOpacity: 1,
                    strokeWeight: 2,
                    //map: service.map,
                    zIndex: 12
                },
                markerOptions: {
                    zIndex: 13
                },
                hideRouteList: true,
                preserveViewport: true,
                //routeIndex: 15,
                map: service.map
            };

            return new google.maps.DirectionsRenderer(opts);
        }

        function createInfoBox(template) {
            return new InfoBox({
                content: template || '',
                disableAutoPan: true,
                maxWidth: 0,
                pixelOffset: new google.maps.Size(25, -115),
                //closeBoxMargin: '15px 5px',
                closeBoxURL: 'static/resources/images/close-icon.png',
                isHidden: false,
                pane: 'floatPane',
                enableEventPropagation: true
            });
        }

        function openInfoBox(infobox, marker) {
            if( !(service.map && infobox && marker)) return;

            // Close last infobox open
            if (service.lastInfoboxOpen) service.lastInfoboxOpen.close();

            infobox.open(service.map, marker);

            service.lastInfoboxOpen = infobox;
            service.infoboxes.push(infobox);
        }

        function closeAllInfoBox() {
            service.infoboxes.forEach(function(infobox, index) {
               if(infobox) {
                   infobox.close();
               }
            });
        }

        function closeInfoBox() {
            if (service.lastInfoboxOpen) service.lastInfoboxOpen.close();
        }

        function addMapListener(eventName, callback) {
            if (service.map) {
                return service.addListener(service.map, eventName, callback);
            }
            return null;
        }

        function setMapCursorDefault() {
            if (service.map) service.map.setOptions({draggableCursor: null});
        }

        function setMapCursorCrosshair() {
            if (service.map) service.map.setOptions({draggableCursor: 'crosshair'});
        }

        function setMapBounds(bounds) {
            if (service.map) service.map.fitBounds(bounds);
        }

        function getBoundsFromPath(path) {
            if (!service.apiAvailable()) return null;
            var bounds = new google.maps.LatLngBounds();
            for (var index = 0; index < path.length; index++) {
                var point = path[index];
                bounds.extend(point);
            }
            return bounds;
        }

        function getDistanceOfPath(path) {
            if (!service.apiAvailable()) return 0;
            return google.maps.geometry.spherical.computeLength(path);
        }

        function fromLatLngToContainerPixel(latlng) {
            if (service.overlayView) {
                return service.overlayView.getProjection().fromLatLngToContainerPixel(latlng);
            }
            return new google.maps.Point();
        }

        function fromLatLngToDivPixel(latlng) {
            if (service.overlayView) {
                return service.overlayView.getProjection().fromLatLngToDivPixel(latlng);
            }
            return new google.maps.Point();
        }

        function fromLatLngToPoint(latlng) {
            if (service.map) {
                var numTiles = 1 << service.map.getZoom();
                var projection = new MercatorProjection();
                var worldCoordinate = projection.fromLatLngToPoint(latlng);
                return new google.maps.Point(
                    worldCoordinate.x * numTiles,
                    worldCoordinate.y * numTiles
                );
            } else {
                return new google.maps.Point();
            }
        }

        function createCoordinate(latitude, longitude) {
            return new google.maps.LatLng(latitude, longitude);
        }

        function createInfoWindow(content) {
            if (!service.apiAvailable()) return null;
            return new google.maps.InfoWindow({content: content});
        }

        function createCanvasInfoWindow() {
            if (!service.apiAvailable()) return null;

            return new CanvasInfoWindow(service.map);
        }

        function hideCanvasInfoWindow(infoWindow) {
            if (infoWindow) infoWindow.hideInfowindow();
        };

        function showInfoWindow(infoWindow, target) {
            if (infoWindow) infoWindow.open(service.map, target);
        }

        function hideInfoWindow(infoWindow) {
            if (infoWindow) infoWindow.close();
        }

        function clearInstanceListeners(_instance) {
            google.maps.event.clearInstanceListeners(_instance);
        }

        function initMarker(_position, _icon, _opts) {
            if (!service.apiAvailable()) return null;

            var additionalOpts = _opts || {};

            var opts = angular.extend({}, {
                position: _position,
                map: service.map,
                icon: _icon,
                zIndex: 10
            }, additionalOpts);

            return new google.maps.Marker(opts);
        }

        function createMarker(_position, _color) {
            _color = _color || service.MARKER_ICONS.RED;
            var marker = service.initMarker(_position, _color);

            service.markers.push(marker);

            return marker;
        }

        function createCustomMarker(_position, _icon, _opts) {
            var opts = _opts || {},
                icon = _icon || 'images/markers/default-marker.png';

            return service.initMarker(_position, icon, opts);
        }

        function createCircleMarker(_position, color) {
            var icon = {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 5,
                fillColor: color || '#6ac1ff',
                fillOpacity: 1,
                strokeColor: 'black',
                strokeWeight: 1
            };

            var marker = service.initMarker(_position, icon);
            service.markers.push(marker);

            return marker;
        }

        function panTo(_position) {
            if (!service.map) return;

            service.map.panTo(_position);
        }

        function panToOffsetLeft(_position, _offset) {
            var offset = _offset || 0.013;
            var latLng = {};

            if(_position instanceof google.maps.LatLng) {
                latLng.lat = _position.lat();
                latLng.lng = _position.lng() + offset;
            } else{
                latLng = _position;
                latLng.lng += offset;
            }

            this.panTo(latLng);
        }

        function showMarker(marker) {
            if (marker && marker instanceof google.maps.Marker) marker.setMap(service.map);
        }

        function showMarkers(markerArray) {
            markerArray.forEach(function (marker) {
                service.showMarker(marker);
            });
        }

        function hideMarker(marker) {
            if (marker && marker instanceof google.maps.Marker) marker.setMap(null);
        }

        function hideMarkers(markerArray) {
            markerArray.forEach( function(marker) {
                service.hideMarker(marker);
            });
        }

        function destroyPolyline(polyline) {
            if (polyline && polyline instanceof google.maps.Polyline) polyline.setMap(null);
            service.clearInstanceListeners(polyline);
            polyline = null;
        }

        function destroyMarker(marker) {
            if (marker instanceof Cluster) {
                marker.remove();
            }
            else if (marker instanceof google.maps.Marker) {
                service.hideMarker(marker);
                service.clearInstanceListeners(marker);
            }
            marker = null;
        }

        function centerMarker(marker) {
            if (service.map) {
                service.map.setCenter(marker.position);
            }
        }

        function setMapCenter(coordinates) {
            if (service.map) {
                service.map.setCenter(coordinates);
            }
        }

        function setMapCenterDefault() {
            service.setMapCenter(service.defaultLatLng);
        }

        function setZoom(zoomValue) {
            if (service.map) {
                service.map.setZoom(zoomValue);
            }
        }

        function setZoomIfGreater(zoomValue) {
            if (zoomValue > service.map.getZoom())
                service.setZoom(zoomValue);
        }

        function setZoomDefault() {
            service.setZoom(service.defaultZoom);
        }

        function setZoomInDefault() {
            service.setZoom(service.ZOOM_IN_LEVEL);
        }

        function createDrawingManager(_color) {
            if (!service.apiAvailable()) return null;

            var strokeColor = _color || '#0000ff';

            var drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: null,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: [
                        google.maps.drawing.OverlayType.POLYGON,
                        google.maps.drawing.OverlayType.RECTANGLE
                    ]
                },
                polygonOptions: {
                    clickable: true,
                    draggable: true,
                    editable: true,
                    geodesic: true,
                    fillColor: '#ffffff',
                    fillOpacity: 0,
                    strokeColor: strokeColor,
                    strokeOpacity: 0.9,
                    strokeWeight: 2,
                    zIndex: 1
                },
                rectangleOptions: {
                    clickable: true,
                    draggable: true,
                    editable: true,
                    fillColor: '#ffffff',
                    fillOpacity: 0,
                    strokeColor: strokeColor,
                    strokeOpacity: 0.9,
                    strokeWeight: 2,
                    zIndex: 1
                }
            });
            service.drawingManager = drawingManager;
            return drawingManager;
        }

        function createDrawingToolsManager() {
            if (!service.apiAvailable()) return null;
            var drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: null,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: [
                        google.maps.drawing.OverlayType.MARKER,
                        google.maps.drawing.OverlayType.CIRCLE,
                        google.maps.drawing.OverlayType.POLYGON,
                        google.maps.drawing.OverlayType.POLYLINE,
                        google.maps.drawing.OverlayType.RECTANGLE
                    ]
                },
                markerOptions: {
                    icon: service.MARKER_ICONS.RED
                },
                circleOptions: {
                    clickable: true,
                    draggable: false,
                    editable: false,
                    fillColor: '#0000ff',
                    fillOpacity: 0.2,
                    strokeColor: '#0000ff',
                    strokeOpacity: 0.8,
                    strokeWeight: 1,
                    zIndex: 1
                },
                polygonOptions: {
                    clickable: true,
                    draggable: false,
                    editable: false,
                    geodesic: true,
                    fillColor: '#0000ff',
                    fillOpacity: 0.2,
                    strokeColor: '#0000ff',
                    strokeOpacity: 0.8,
                    strokeWeight: 1,
                    zIndex: 1
                },
                polylineOptions: {
                    clickable: true,
                    draggable: false,
                    editable: false,
                    strokeColor: '#0000ff',
                    strokeOpacity: 0.8,
                    strokeWeight: 1,
                    zIndex: 1
                },
                rectangleOptions: {
                    clickable: true,
                    draggable: false,
                    editable: false,
                    fillColor: '#0000ff',
                    fillOpacity: 0.2,
                    strokeColor: '#0000ff',
                    strokeOpacity: 0.8,
                    strokeWeight: 1,
                    zIndex: 1
                }
            });
            service.drawingManager = drawingManager;
            return drawingManager;
        }

        function showDrawingManager(drawingManager) {
            if (drawingManager) {
                if(!drawingManager.getMap()) {
                    drawingManager.setMap(service.map);
                }
                service.setEnableDrawingManager(drawingManager, true);
            }
        }

        function hideDrawingManager(drawingManager) {
            if (drawingManager) {
                drawingManager.setMap(null);
                service.setEnableDrawingManager(drawingManager, false);
            }
        }

        function setEnableDrawingManager(drawingManager, enabled) {
            if (drawingManager) {
                var drawingOptions = {drawingControl: enabled};
                // if drawing mode is disabled, set current mode to hand pointer.
                if (!enabled) drawingOptions['drawingMode'] = null;
                drawingManager.setOptions(drawingOptions);
            }
        }

        function createCircle(latitude, longitude, radius) {
            if (!service.apiAvailable()) return null;
            var latlng = new google.maps.LatLng(latitude, longitude);
            var circleOptions = {
                center: latlng,
                clickable: false,
                draggable: false,
                editable: false,
                fillColor: '#ffffff',
                fillOpacity: 0,
                map: service.map,
                radius: radius,
                strokeColor: '#0000ff',
                strokeOpacity: 0.9,
                strokeWeight: 2,
                zIndex: 100
            };
            return new google.maps.Circle(circleOptions);
        }

        function updateCircle(circle, latitude, longitude, radius) {
            if (circle) {
                circle.setCenter({lat: latitude, lng: longitude});
                circle.setRadius(radius);
            }
        }

        function initPolygon(path, opts) {
            if (!service.apiAvailable()) return null;

            var strokeColor = '#0000ff';

            var defaultOptions = {
                clickable: false,
                draggable: false,
                editable: false,
                fillColor: strokeColor,
                fillOpacity: 0,
                strokeColor: strokeColor,
                strokeOpacity: 0.9,
                strokeWeight: 2,
                zIndex: 100
            };

            if (opts) {
                angular.merge(opts, {path: path});
            }

            var polygonOptions = opts ? opts : defaultOptions;
            var polygon = new google.maps.Polygon(polygonOptions);
            polygon.setPath(path);


            return polygon;
        }

        function createPolygon(path, opts) {
            var polygon = service.initPolygon(path, opts);

            polygon.setMap(service.map);

            return polygon;
        }

        function updatePolygon(polygon, path) {
            if (polygon) polygon.setPath(path);
        }

        function showPolygon(polygon) {
            if (polygon) polygon.setMap(service.map);
        }

        function hidePolygon(polygon) {
            if (polygon) polygon.setMap(null);
        }

        function resetPolygonFill(polygon) {
            polygon.setOptions({
                fillOpacity: 0
            });
        }

        function fillPolygon(polygon) {
            polygon.setOptions({
                fillOpacity: 0.5
            });
        }

        function getPolygonCenter (polygon) {
            if (!service.map || !polygon) return;

            var bounds = new google.maps.LatLngBounds();

            polygon.getPath().forEach(function (path) {
                bounds.extend(path);
            });

            return bounds.getCenter();
        }

        function panToPolygon(polygon) {
            if (!service.map || !polygon) return;

            service.panTo(service.getPolygonCenter(polygon));
        }

        function isLocationWithinPolygon (latLng, poly) {
            if (!service.map || !poly) return false;

            return google.maps.geometry.poly.containsLocation(latLng, poly);
        }

        function createPolyline(path, lineColor) {
            if (!service.apiAvailable()) return null;
            var polylineOptions = {
                path: path,
                clickable: true,
                draggable: false,
                editable: false,
                map: service.map,
                strokeColor: lineColor || '#ff0000',
                strokeOpacity: 1,
                strokeWeight: 2,
                zIndex: 100
            };
            return new google.maps.Polyline(polylineOptions);
        }

        function createDashedPolyline(path, lineColor) {
            if (!service.apiAvailable()) return null;

            var lineSymbol = {
                path: 'M 0,-1 0,1',
                strokeOpacity: 1,
                scale: 1
            };

            var polylineOptions = {
                path: path,
                clickable: true,
                draggable: false,
                editable: false,
                map: service.map,
                strokeColor: lineColor || '#ff0000',
                icons: [{
                    icon: lineSymbol,
                    offset: '0',
                    repeat: '3px'
                }],
                strokeOpacity: 0,
                zIndex: 100
            };
            return new google.maps.Polyline(polylineOptions);
        }

        function updatePolyline(polyline, path) {
            if (polyline) polyline.setPath(path);
        }

        function showPolyline(polyline) {
            if (polyline) polyline.setMap(service.map);
        }

        function hidePolyline(polyline) {
            if (polyline) polyline.setMap(null);
        }

        function addListener(instance, eventName, handler) {
            if (!service.apiAvailable()) return null;
            return google.maps.event.addListener(instance, eventName, handler);
        }

        function addListenerOnce(instance, eventName, handler, capture) {
            if (!service.apiAvailable()) return null;
            return google.maps.event.addListenerOnce(instance, eventName, handler, capture);
        }

        function clearInstanceListeners(instance) {
            if (service.apiAvailable())
                google.maps.event.clearInstanceListeners(instance);
        }

        function clearListeners(instance, eventName) {
            if (service.apiAvailable())
                google.maps.event.clearListeners(instance, eventName);
        }

        function removeListener(listener) {
            if (service.apiAvailable())
                google.maps.event.removeListener(listener);
        }

        function trigger(instance, eventName, args) {
            if (service.apiAvailable())
                google.maps.event.trigger(instance, eventName, args);
        }

        function showCurrentLocation(_latLng, _isDraggable) {
            var icon = '/images/markers/current-location.png';
            var isDraggable = _isDraggable || false;

            return service.createCustomMarker(_latLng, icon, {draggable: isDraggable});
        }

        function reverseGeocode(latLng) {
            if (!service.geocoder) return;

            var dfd = $q.defer();

            service.geocoder.geocode({'latLng': latLng}, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    dfd.resolve(results);
                } else {
                    var error = "Geocoder failed due to: " + status;
                    $log.error(error);
                    dfd.reject(error);
                }
            });

            return dfd.promise;
        }

        function loadKMLByURL(srcUrl, kmlOptions) {
            if (service.map) {
                var opt = {
                    url: srcUrl,
                    map: service.map,
                    preserveViewport: true
                };

                if (kmlOptions) {
                    opt = angular.extend({}, opt, kmlOptions);
                }

                return new google.maps.KmlLayer(opt);
            }
            return null;
        }

        function loadClusterStyles(layerName) {
            var defaultStyle = 'resources/images/cluster_icons/m';

            if(layerName == 'meters') {
                return defaultStyle;
            } else if(layerName == 'transformers') {
                return 'resources/images/cluster_icons/transformers/m';
            } else if(layerName == 'poles') {
                return 'resources/images/cluster_icons/poles/m';
            }
            return defaultStyle;
        }

        function initMapClusterer(layerName) {
            if (!service.markerClusterers[layerName]) {
                var clusterStyle = loadClusterStyles(layerName);

                service.markerClusterers[layerName] = new MarkerClusterer(service.map, [],
                    {imagePath: clusterStyle});

                return service.markerClusterers[layerName];
            }
            return null;
        }

        function destroyMapClusterer(layerName) {
            if (service.markerClusterers[layerName]) {
                service.markerClusterers[layerName] = null;
            }
        }

        function createClusterMarker(_position, clusterCount, layerName) {
            if (!service.apiAvailable() || !service.markerClusterers[layerName]) return null;

            var latLngObj = new google.maps.LatLng(_position.lat, _position.lng)
            var cluster = new Cluster(service.markerClusterers[layerName]);

            cluster.center_ = latLngObj;

            cluster.clusterIcon_.setCenter(latLngObj);
            cluster.clusterIcon_.setSums({text: clusterCount, index: Math.round(Math.log(clusterCount) / Math.LN10)});
            cluster.clusterIcon_.textColor_ = 'white';
            cluster.clusterIcon_.show();
            cluster.clusterIcon_.triggerClusterClick = function () {
                var currentZoom = service.map.getZoom();
                service.map.setZoom(++currentZoom);
                service.map.setCenter(cluster.center_);
            };

            return cluster;
        }

        function getClustererInstance(layerName) {
            return service.markerClusterers[layerName];
        }

        function clearClusterMarkers(clusterArray) {
            clusterArray.forEach(function (item, index) {
                if (item instanceof Cluster) {
                    item.remove();
                }
                clusterArray[index] = null;
            });
        }

        function resetClusters(layerName) {
            if (service.markerClusterers[layerName]) {
                service.markerClusterers[layerName].clusters_ = [];
            }
        }

        function insertImageMapType(srcUrl, insertIndex) {
            if (!service.apiAvailable()) return;

            var _insertIndex = insertIndex || 0;

            var imageTile = new google.maps.ImageMapType({
                getTileUrl: function (coord, zoom) {
                    var z2 = Math.pow(2, zoom);
                    var y = coord.y,
                        x = coord.x >= 0 ? coord.x : z2 + coord.x

                    return srcUrl + '/' + zoom + "/" + x + "/" + y + ".png";
                },
                tileSize: new google.maps.Size(256, 256),
                isPng: true,
                opacity: 1.0
            });

            service.map.overlayMapTypes.insertAt(_insertIndex, imageTile);

            return _insertIndex;
        }

        function removeOverlayAtIndex(index) {
            service.map.overlayMapTypes.setAt(index, null);
        }

        function initializeAutocomplete(elementId) {
            var input = document.getElementById(elementId);
            var autocomplete = new google.maps.places.Autocomplete(input, {
                types: ["geocode"]
            });

            autocomplete.bindTo('bounds', service.map);

            return autocomplete;
        }

        function containsLocation (latLng, polygon) {
            if(!polygon) return;

            return google.maps.geometry.poly.containsLocation(latLng, polygon);
        }

        function triggerEvent (obj, event) {
            google.maps.event.trigger(obj, 'click');
        }

        function setMapDefaultCursor() {
            if (!service.map) return;
            service.map.setOptions({draggableCursor: ''});
        }

        function setMapTargetCursor() {
            if (!service.map) return;
            service.map.setOptions({draggableCursor: 'crosshair'});
        }

        function castLatLngLitToObj(latLngLit) {
            if (latLngLit instanceof google.maps.LatLng) return latLngLit;
            return new google.maps.LatLng(latLngLit);
        }

        service.computeRoute = computeRoute;

        function computeRoute (routes, directionsRenderer) {
            var dfd = $q.defer();

            var request = {
                travelMode: google.maps.DirectionsTravelMode.DRIVING,
                optimizeWaypoints: true
            };

            angular.merge(routes, request);

            service.directionsService.route(routes, function (result, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsRenderer.setDirections(result);
                    dfd.resolve();
                } else { dfd.reject(); }
            });

            return dfd.promise;
        }

        return service;
    }
}());


(function () {
'use strict';

angular.module('demoApp')
    .factory('alertServices', ['$mdToast', 'SweetAlert', alertServices]);

    function alertServices($mdToast, SweetAlert) {
        var service = {};

        service.showBottomLeftToast = showBottomLeftToast;
        service.showNoDataAvailablePrompt = showNoDataAvailablePrompt;
        service.showEntityNotFound = showEntityNotFound;
        service.showFilterSelectionEmpty = showFilterSelectionEmpty;
        service.showQueryIsEmpty = showQueryIsEmpty;
        service.showZoneLocationInvalid = showZoneLocationInvalid;

        function showBottomLeftToast(message) {
            $mdToast.show(
                $mdToast.simple()
                    .textContent(message)
                    .position('bottom left')
                    .hideDelay(2000)
            );
        }

        function showNoDataAvailablePrompt (entityName) {
            service.showBottomLeftToast('No '+ entityName +' data available for this area.');
        }

        function showMessage(message, type) {
            SweetAlert.swal({
                title: message,
                type: type
            });
        }

        function showEntityNotFound(entityName) {
            showMessage(entityName + ' not found.', 'warning');
        }

        function showFilterSelectionEmpty() {
            showMessage('Please select filter type.', 'warning');
        }

        function showQueryIsEmpty () {
            showMessage('Please fill in search query.', 'info');
        }

        function showZoneLocationInvalid () {
            showMessage('Selected Location is out of Zone.', 'warning');
        }

        return service;
    }
}());
(function () {
    'use strict';

    angular.module('demoApp')
        .controller('routePanelController', ['$scope', '$rootScope', '$timeout', 'gmapServices', 'routePlannerService', routePanelController]);

    function routePanelController($scope, $rootScope, $timeout, gmapServices, routePlannerService) {
        var vm = this;

        vm.destinations = {};

        vm.place = '';

        vm.initialize = initialize;
        vm.addSelectedPlace = addSelectedPlace;
        vm.clearRoutes = clearRoutes;
        vm.onClickDestinationItem = onClickDestinationItem;
        vm.removeDestination = removeDestination;

        vm.calculateFastestRoundtrip = calculateFastestRoundtrip;
        vm.calculateFastestAZTrip = calculateFastestAZTrip;

        vm.initialize();

        /* Controller Functions here */

        function initialize() {
            $rootScope.$on('route-panel-opened', function(){
                // set cursor to crosshair
                // initialize destination adding when map is clicked
                routePlannerService.initialize();
            });

            $rootScope.$on('new-destination', function(e, params){
                var zoneNo = params.zone,
                    destination = params.destination;

                if(!vm.destinations[zoneNo]) vm.destinations[zoneNo] = [];

                $scope.$apply(function () {
                    addDestination(zoneNo, destination);
                });
            });
        }

        /* Place Functions */
        function addSelectedPlace() {
            $timeout(function(){
                routePlannerService.addPlaceDestination();
                vm.place = '';
            });
        }

        /* Destination Functions */

        function clearRoutes () {
            routePlannerService.clearRoutes();
            vm.destinations = {};
        }

        function onClickDestinationItem (latLng) {
            gmapServices.panTo(latLng);
        }

        function removeDestination(destNo, zoneNo) {
            routePlannerService.removeDestination(destNo, zoneNo);
            vm.destinations[zoneNo].forEach(function(destination, index){
                if (destination.number == destNo) {
                    vm.destinations[zoneNo].splice(index, 1);
                    updateDestinations(zoneNo);
                    return;
                }
            });
        }

        function updateDestinations (zoneNo) {
            vm.destinations[zoneNo] = [];
            routePlannerService.destinations[zoneNo].forEach(function (destination, index) {
                addDestination(zoneNo, destination);
            });
        }

        function addDestination(zoneNo, destination) {
            var coordinates = destination.coordinates.toJSON();
            var location = '(' + coordinates['lat'] + ', ' + coordinates['lng'] + ')';
            vm.destinations[zoneNo].push({
                number: destination.number,
                latLng: coordinates,
                icon: destination.marker.getIcon(),
                location: location
            });
        }

        /* Calculate Route Functions */

        function calculateFastestRoundtrip () {
            routePlannerService.calculateFastestRoundtrip();
        }

        function calculateFastestAZTrip () {
            routePlannerService.calculateFastestAZTrip();
        }

    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('mapLayerPanelController', ['$mdSidenav', mapLayerPanelController]);

    function mapLayerPanelController ($mdSidenav) {
        var vm = this;

        vm.layers = [
            {
                label: 'Meters',
                selected: false
            },
            {
                label: 'Primary Circuits',
                selected: false
            },
            {
                label: 'Secondary Circuits',
                selected: false
            },
            {
                label: 'Transformers',
                selected: false
            },
            {
                label: 'Poles',
                selected: false
            },
            {
                label: 'Outages',
                selected: false
            },
            {
                label: 'Imagery',
                selected: false
            }
        ];

        //vm.initialize = initialize;
        //
        //vm.initialize();

        /* Controller Functions here */

        //function initialize () {
        //
        //}


        /* Non Scope Functions here */

    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('mainController', ['APP_NAME', '$rootScope', mainController]);

    function mainController (APP_NAME, $rootScope) {
        var vm = this;

        $rootScope.APP_NAME = APP_NAME;

    }
}());
(function () {
    'use strict';

    angular.module('demoApp')
        .controller('layerController', ['$rootScope', 'truckServices', layerController]);

    function layerController($rootScope, truckServices) {
        var vm = this;

        vm.layers = [
            {
                label: 'Zones',
                action: '',
                selected: false,
                children: [
                    {
                        label: 'Zone 1',
                        selected: false,
                        action: 'layerCtl.toggleZones("1")'
                    },
                    {
                        label: 'Zone 2',
                        selected: false,
                        action: 'layerCtl.toggleZones("2")'
                    },
                    {
                        label: 'Zone 3',
                        selected: false,
                        action: 'layerCtl.toggleZones("3")'
                    },
                    {
                        label: 'Zone 4',
                        selected: false,
                        action: 'layerCtl.toggleZones("4")'
                    },
                    {
                        label: 'Zone 5',
                        selected: false,
                        action: 'layerCtl.toggleZones("5")'
                    },
                    {
                        label: 'Zone 6',
                        selected: false,
                        action: 'layerCtl.toggleZones("6")'
                    }
                ]
            },
            {
                label: 'Trucks',
                action: 'layerCtl.toggleTrucks()',
                selected: false
            },
        ];

        vm.toggleZones = toggleZones;
        vm.toggleTrucks = toggleTrucks;

        function toggleZones (_zoneNumber) {
            $rootScope.$broadcast('toggle-zone-layer', {zoneNumber: _zoneNumber});
        }

        function toggleTrucks () {
            truckServices.toggleTrucks();
        }

    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('indexController', ['$scope', '$rootScope', '$mdSidenav', 'routePlannerService', indexController]);

    function indexController ($scope, $rootScope, $mdSidenav, routePlannerService) {
        var vm = this;

        // Show Treasure Overlay Spinner
        $rootScope.spinner = {
            active: false
        };

        vm.lastSideNavOpenId = '';

        vm.initialize = initialize;
        vm.toggleLayerPanel = buildToggler('layerPanel');
        vm.toggleRoutePanel = toggleRoutePanel;
        vm.closeSideNav = closeSideNav;

        vm.initialize();

        function initialize () {
            $scope.$on('routePanel-closed', function() {
                routePlannerService.endService();
            });
        }

        function buildToggler(navID) {
            return function () {
                if (vm.lastSideNavOpenId && vm.lastSideNavOpenId !== navID) {
                    closeSideNav(vm.lastSideNavOpenId);
                }
                $mdSidenav(navID).toggle();
                vm.lastSideNavOpenId = navID;
            }
        }

        function toggleRoutePanel () {
            var navID = 'routePanel';

            if (vm.lastSideNavOpenId && vm.lastSideNavOpenId !== navID) closeSideNav(vm.lastSideNavOpenId);

            vm.lastSideNavOpenId = navID;

            $mdSidenav(navID).toggle()
                .then(function () {
                    //console.log('route panel toggled');
                    $rootScope.$broadcast('route-panel-opened');
                });
        }

        function closeSideNav(navID) {
            $mdSidenav(navID)
                .close()
                .then(function(){
                    $scope.$broadcast(navID + '-closed');
                })
            ;
        }
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('gmapController', ['$rootScope', 'gmapServices', 'zoneServices', 'truckServices', gmapController]);

    function gmapController($rootScope, gmapServices, zoneServices, truckServices) {

        var vm = this;

        vm.initialize = initialize;

        vm.initialize();

        function initialize () {
            gmapServices.createMap('map-canvas');

            zoneServices.initialize();
            truckServices.initialize();

            $rootScope.$on('toggle-zone-layer', function(e, params){
                zoneServices.toggleZones(params.zoneNumber);
            });
        }

    }
}());
(function(){
    'use strict';

    var zones = [
        {
            id: 1,
            name: '1',
            color: '#2ecc71',
            path: [{"lat": 47.73396941290473, "lng": -122.37479925155634}, {
                "lat": 47.734012708496365,
                "lng": -122.32486724853516
            }, {"lat": 47.71819298993781, "lng": -122.3246955871582}, {
                "lat": 47.710223575105374,
                "lng": -122.32950210571289
            }, {"lat": 47.69000582535817, "lng": -122.32967376708984}, {
                "lat": 47.68203210030426,
                "lng": -122.3214340209961
            }, {"lat": 47.653825382654695, "lng": -122.32280731201172}, {
                "lat": 47.65301594860768,
                "lng": -122.32795715332031
            }, {"lat": 47.64399569183653, "lng": -122.33430862426758}, {
                "lat": 47.64758085221801,
                "lng": -122.34100341796875
            }, {"lat": 47.648621659141774, "lng": -122.3466682434082}, {
                "lat": 47.64746520572399,
                "lng": -122.34752655029297
            }, {"lat": 47.655675470505955, "lng": -122.3660659790039}, {
                "lat": 47.660762874112834,
                "lng": -122.37293243408203
            }, {"lat": 47.660647256808595, "lng": -122.37945556640625}, {
                "lat": 47.66769944380821,
                "lng": -122.39009857177734
            }, {"lat": 47.6648093184536, "lng": -122.39662170410156}, {
                "lat": 47.66897104826834,
                "lng": -122.4045181274414
            }, {"lat": 47.67521302081865, "lng": -122.40846633911133}, {
                "lat": 47.6762532769912,
                "lng": -122.40966796875
            }, {"lat": 47.676831188125945, "lng": -122.40760803222656}, {
                "lat": 47.68353448952194,
                "lng": -122.40314483642578
            }, {"lat": 47.69058358415729, "lng": -122.4038314819336}, {
                "lat": 47.69347228214548,
                "lng": -122.40657806396484
            }, {"lat": 47.694858800343745, "lng": -122.40365982055664}, {
                "lat": 47.69728511848107,
                "lng": -122.40245819091797
            }, {"lat": 47.705603066391944, "lng": -122.38357543945312}, {
                "lat": 47.70837542077305,
                "lng": -122.38048553466797
            }, {"lat": 47.712187167274436, "lng": -122.37997055053711}, {
                "lat": 47.71519016513394,
                "lng": -122.3770523071289
            }, {"lat": 47.719001413201916, "lng": -122.37619400024414}, {
                "lat": 47.72188853674689,
                "lng": -122.37653732299805
            }, {"lat": 47.72535287380616, "lng": -122.3737907409668}, {
                "lat": 47.72976956941706,
                "lng": -122.3732328414917
            }, {"lat": 47.73311792562008, "lng": -122.3742413520813}]
        },
        {
            id: 2,
            name: '2',
            color: '#3498db',
            path: [{"lat": 47.653825382654695, "lng": -122.32254981994629}, {
                "lat": 47.653767566353125,
                "lng": -122.31911659240723
            }, {"lat": 47.65157049946028, "lng": -122.31654167175293}, {
                "lat": 47.64706044097845,
                "lng": -122.30976104736328
            }, {"lat": 47.64694479333215, "lng": -122.29774475097656}, {
                "lat": 47.65313158281113,
                "lng": -122.2931957244873
            }, {"lat": 47.65428791076271, "lng": -122.28529930114746}, {
                "lat": 47.64654002455373,
                "lng": -122.2789478302002
            }, {"lat": 47.64798561293068, "lng": -122.27293968200684}, {
                "lat": 47.65174395547039,
                "lng": -122.27465629577637
            }, {"lat": 47.656137982226795, "lng": -122.26778984069824}, {
                "lat": 47.663364195766555,
                "lng": -122.26487159729004
            }, {"lat": 47.669549040054136, "lng": -122.2507095336914}, {
                "lat": 47.67908498039196,
                "lng": -122.24530220031738
            }, {"lat": 47.68544130583405, "lng": -122.24367141723633}, {
                "lat": 47.68948583696653,
                "lng": -122.25234031677246
            }, {"lat": 47.689832496470345, "lng": -122.25826263427734}, {
                "lat": 47.69006360152612,
                "lng": -122.26195335388184
            }, {"lat": 47.694107774229316, "lng": -122.26804733276367}, {
                "lat": 47.706815989578125,
                "lng": -122.27242469787598
            }, {"lat": 47.7215420903693, "lng": -122.2774887084961}, {
                "lat": 47.73193447949174,
                "lng": -122.27980613708496
            }, {"lat": 47.73372407053875, "lng": -122.28341102600098}, {
                "lat": 47.734128163231425,
                "lng": -122.32478141784668
            }, {"lat": 47.71801975474925, "lng": -122.32426643371582}, {
                "lat": 47.71033908257511,
                "lng": -122.32924461364746
            }, {"lat": 47.68965916700646, "lng": -122.32924461364746}, {
                "lat": 47.68278330032168,
                "lng": -122.32134819030762
            }, {"lat": 47.67937392107755, "lng": -122.32074737548822}, {
                "lat": 47.67660002444018,
                "lng": -122.32091903686518
            }, {"lat": 47.67532860586194, "lng": -122.32109069824213}, {
                "lat": 47.67301685634941,
                "lng": -122.32143402099604
            }, {"lat": 47.67035821780067, "lng": -122.32246398925776}, {
                "lat": 47.66541625805217,
                "lng": -122.32207775115961
            }, {"lat": 47.663335292904755, "lng": -122.32222795486445}]
        },
        {
            id: 3,
            name: '3',
            color: '#f1c40f',
            path: [{"lat": 47.66203446769422, "lng": -122.43593157681352}, {
                "lat": 47.66492472099233,
                "lng": -122.42631862484802
            }, {"lat": 47.66816161476579, "lng": -122.42288542768819}, {
                "lat": 47.67024236903388,
                "lng": -122.41825061156482
            }, {"lat": 47.67266982209301, "lng": -122.40880931038294}, {
                "lat": 47.668277214308176,
                "lng": -122.40623442171687
            }, {"lat": 47.666543192859955, "lng": -122.40537612245691}, {
                "lat": 47.66561835784712,
                "lng": -122.4003979866564
            }, {"lat": 47.66353741918596, "lng": -122.39627815013887}, {
                "lat": 47.663306198640285,
                "lng": -122.38872511649305
            }, {"lat": 47.65995338590962, "lng": -122.3816870624205}, {
                "lat": 47.65660035785553,
                "lng": -122.3815154025724
            }, {"lat": 47.656831608080914, "lng": -122.37928382444431}, {
                "lat": 47.659144054022335,
                "lng": -122.37636560689123
            }, {"lat": 47.65579097399341, "lng": -122.36761095423651}, {
                "lat": 47.64503654067807,
                "lng": -122.34598181228381
            }, {"lat": 47.63879101473176, "lng": -122.33722715952592}, {
                "lat": 47.62838014546481,
                "lng": -122.33602554040442
            }, {"lat": 47.63358583940231, "lng": -122.33036076517811}, {
                "lat": 47.643880018190565,
                "lng": -122.3325923434544
            }, {"lat": 47.65266894746878, "lng": -122.32297939162106}, {
                "lat": 47.63381719158259,
                "lng": -122.32400935046508
            }, {"lat": 47.626529107155164, "lng": -122.32898748622165}, {
                "lat": 47.61692579362245,
                "lng": -122.32933080580352
            }, {"lat": 47.60928816466249, "lng": -122.33207736343354}, {
                "lat": 47.602690956991516,
                "lng": -122.32581113819504
            }, {"lat": 47.59817686418681, "lng": -122.3205761026918}, {
                "lat": 47.592273031938774,
                "lng": -122.3202328299547
            }, {"lat": 47.59471633902445, "lng": -122.34348938932976}, {
                "lat": 47.60021623670314,
                "lng": -122.34158023895361
            }, {"lat": 47.60698929701149, "lng": -122.34653761431287}, {
                "lat": 47.62412047726642,
                "lng": -122.37208201114896
            }, {"lat": 47.62476427392954, "lng": -122.38291088810155}, {
                "lat": 47.6284151905678,
                "lng": -122.39305398111549
            }, {"lat": 47.634294813254975, "lng": -122.40789672469066}, {
                "lat": 47.63913244149457,
                "lng": -122.41621780438379
            }, {"lat": 47.64464364688307, "lng": -122.4194700162044}, {
                "lat": 47.648495655879515,
                "lng": -122.41996631969766
            }, {"lat": 47.652926052360485, "lng": -122.42252340534583}, {
                "lat": 47.65619997435526,
                "lng": -122.42748430483255
            }]
        },
        {
            id: 4,
            name: '4',
            color: '#e67e22',
            path: [{"lat": 47.63537873560165, "lng": -122.32263565063477}, {
                "lat": 47.6529003141482,
                "lng": -122.32229232788086
            }, {"lat": 47.652148683920224, "lng": -122.3192024230957}, {
                "lat": 47.64613525263859,
                "lng": -122.31328010559082
            }, {"lat": 47.64393786465262, "lng": -122.31422424316406}, {
                "lat": 47.64440048033145,
                "lng": -122.3104476928711
            }, {"lat": 47.64671349727142, "lng": -122.31010437011719}, {
                "lat": 47.646597848856985,
                "lng": -122.29740142822266
            }, {"lat": 47.64798561293068, "lng": -122.28873252868652}, {
                "lat": 47.643764382716846,
                "lng": -122.2822093963623
            }, {"lat": 47.6434752448769, "lng": -122.27448463439941}, {
                "lat": 47.63630411445119,
                "lng": -122.27105140686035
            }, {"lat": 47.62421506209666, "lng": -122.28057861328125}, {
                "lat": 47.62085970976899,
                "lng": -122.27697372436523
            }, {"lat": 47.60373248855614, "lng": -122.28057861328125}, {
                "lat": 47.593719724804714,
                "lng": -122.28512763977051
            }, {"lat": 47.5898993215324, "lng": -122.2844409942627}, {
                "lat": 47.58984143448947,
                "lng": -122.30881690979004
            }, {"lat": 47.59481948616757, "lng": -122.31388092041016}, {
                "lat": 47.59400913793055,
                "lng": -122.31928825378418
            }, {"lat": 47.59794499753238, "lng": -122.31988906860352}, {
                "lat": 47.60946147401063,
                "lng": -122.33113288879395
            }, {"lat": 47.617909135814486, "lng": -122.32847213745117}, {
                "lat": 47.62722312591712,
                "lng": -122.32812881469727
            }, {"lat": 47.632428981146155, "lng": -122.32383728027344}]
        },
        {
            id: 5,
            name: '5',
            color: '#9b59b6',
            path: [{"lat": 47.58717856130287, "lng": -122.34340667724604}, {
                "lat": 47.59424066727876,
                "lng": -122.34151840209961
            }, {"lat": 47.587062781134534, "lng": -122.3598861694336}, {
                "lat": 47.58648387645129,
                "lng": -122.37190246582031
            }, {"lat": 47.59620862537854, "lng": -122.38203048706055}, {
                "lat": 47.59863953025979,
                "lng": -122.39164352416992
            }, {"lat": 47.59099916318304, "lng": -122.398681640625}, {
                "lat": 47.58162082433416,
                "lng": -122.41395950317383
            }, {"lat": 47.57872593596314, "lng": -122.42237091064453}, {
                "lat": 47.57050358015324,
                "lng": -122.4209976196289
            }, {"lat": 47.56865047664261, "lng": -122.41584777832031}, {
                "lat": 47.548609607667174,
                "lng": -122.39988327026367
            }, {"lat": 47.541773107469375, "lng": -122.40262985229492}, {
                "lat": 47.53713768492089,
                "lng": -122.398681640625
            }, {"lat": 47.52937243399476, "lng": -122.40434646606445}, {
                "lat": 47.52543141908686,
                "lng": -122.3957633972168
            }, {"lat": 47.517548500921755, "lng": -122.40194320678711}, {
                "lat": 47.501315233783515,
                "lng": -122.38838195800781
            }, {"lat": 47.495284455753485, "lng": -122.37653732299805}, {
                "lat": 47.50433036303731,
                "lng": -122.37035751342773
            }, {"lat": 47.51778036836252, "lng": -122.37104415893555}, {
                "lat": 47.51731663245634,
                "lng": -122.36040115356445
            }, {"lat": 47.51580946245539, "lng": -122.36074447631836}, {
                "lat": 47.51720069783942,
                "lng": -122.35868453979492
            }, {"lat": 47.51731663245634, "lng": -122.33739852905273}, {
                "lat": 47.51395442456292,
                "lng": -122.33739852905273
            }, {"lat": 47.51395442456292, "lng": -122.33482360839844}, {
                "lat": 47.51499789144658,
                "lng": -122.33139038085938
            }, {"lat": 47.514186307885765, "lng": -122.32744216918945}, {
                "lat": 47.520678624918006,
                "lng": -122.33070373535156
            }, {"lat": 47.521142331109644, "lng": -122.32658386230469}, {
                "lat": 47.518417998541324,
                "lng": -122.32606887817383
            }, {"lat": 47.518707827879176, "lng": -122.3177433013916}, {
                "lat": 47.52230157865766,
                "lng": -122.3177433013916
            }, {"lat": 47.52230157865766, "lng": -122.30958938598633}, {
                "lat": 47.52461999690649,
                "lng": -122.30976104736328
            }, {"lat": 47.52676444256322, "lng": -122.31199264526367}, {
                "lat": 47.527344007421384,
                "lng": -122.31748580932617
            }, {"lat": 47.52943038788705, "lng": -122.3173999786377}, {
                "lat": 47.52937243399476,
                "lng": -122.31860160827637
            }, {"lat": 47.53099511877197, "lng": -122.31842994689941}, {
                "lat": 47.54148340556681,
                "lng": -122.33413696289062
            }, {"lat": 47.545017659405715, "lng": -122.33799934387207}, {
                "lat": 47.55486107168617,
                "lng": -122.34208023140025
            }, {"lat": 47.56522845184098, "lng": -122.3460088439794}, {
                "lat": 47.57036872780457,
                "lng": -122.3457448982436
            }, {"lat": 47.57365589320603, "lng": -122.34307745738869}]
        },
        {
            id: 6,
            name: '6',
            color: '#e74c3c',
            path: [{"lat": 47.59453035637802, "lng": -122.34091785037822}, {
                "lat": 47.59221502197141,
                "lng": -122.32023258569365
            }, {"lat": 47.5940094151094, "lng": -122.3195459379113}, {
                "lat": 47.59470400239594,
                "lng": -122.31370943169884
            }, {"lat": 47.58972592319465, "lng": -122.30847374228529}, {
                "lat": 47.58995747227925,
                "lng": -122.28418357672649
            }, {"lat": 47.5864841286945, "lng": -122.28444106964724}, {
                "lat": 47.58422633176112,
                "lng": -122.28607185814633
            }, {"lat": 47.57936305375569, "lng": -122.28075033778151}, {
                "lat": 47.571256586449984,
                "lng": -122.27800374663144
            }, {"lat": 47.572646355687375, "lng": -122.27671628202751}, {
                "lat": 47.571198678596865,
                "lng": -122.27491383158468
            }, {"lat": 47.56894022242567, "lng": -122.27122309972651}, {
                "lat": 47.56865066971697,
                "lng": -122.26761819884018
            }, {"lat": 47.564944253697924, "lng": -122.26444245282903}, {
                "lat": 47.56309094733885,
                "lng": -122.26469994575348
            }, {"lat": 47.558341550505446, "lng": -122.2607517209878}, {
                "lat": 47.55301244642313,
                "lng": -122.25791929888169
            }, {"lat": 47.55405513986389, "lng": -122.25568769357147}, {
                "lat": 47.558167783914044,
                "lng": -122.25568769355823
            }, {"lat": 47.56332261421105, "lng": -122.25757597495726}, {
                "lat": 47.564596763728076,
                "lng": -122.24899287760792
            }, {"lat": 47.554634405014326, "lng": -122.24418634313997}, {
                "lat": 47.547451064316334,
                "lng": -122.24907870865002
            }, {"lat": 47.54762486645136, "lng": -122.25637434137855}, {
                "lat": 47.54322170169798,
                "lng": -122.25543020068676
            }, {"lat": 47.53968731505604, "lng": -122.26015090422464}, {
                "lat": 47.5339506721839,
                "lng": -122.26169586175683
            }, {"lat": 47.53035770754075, "lng": -122.25963591841122}, {
                "lat": 47.52490984000645,
                "lng": -122.25628851047713
            }, {"lat": 47.52253346524557, "lng": -122.26066589010935}, {
                "lat": 47.52015698281839,
                "lng": -122.25328442643661
            }, {"lat": 47.50901503460104, "lng": -122.23451975479134}, {
                "lat": 47.50935168838574,
                "lng": -122.24648316985792
            }, {"lat": 47.507474169679426, "lng": -122.24483277590878}, {
                "lat": 47.50325568801634,
                "lng": -122.24548043499635
            }, {"lat": 47.50282017069536, "lng": -122.24900680098301}, {
                "lat": 47.50287654591265,
                "lng": -122.24061138892114
            }, {"lat": 47.49920824887862, "lng": -122.24102666989245}, {
                "lat": 47.49930898577965,
                "lng": -122.2493383713695
            }, {"lat": 47.502873661715704, "lng": -122.25042646238882}, {
                "lat": 47.50263594004428,
                "lng": -122.25924047774407
            }, {"lat": 47.49531941032343, "lng": -122.25935860506104}, {
                "lat": 47.49576256579964,
                "lng": -122.27023537896389
            }, {"lat": 47.5101198198334, "lng": -122.26875311675701}, {
                "lat": 47.510098147431975,
                "lng": -122.27482460679056
            }, {"lat": 47.50722691871787, "lng": -122.27576258436397}, {
                "lat": 47.50839980655513,
                "lng": -122.27846281861378
            }, {"lat": 47.510036500058625, "lng": -122.27807319968281}, {
                "lat": 47.51006269208476,
                "lng": -122.29137060117773
            }, {"lat": 47.52477586880814, "lng": -122.29100616062499}, {
                "lat": 47.52498468876754,
                "lng": -122.30160753081441
            }, {"lat": 47.526098181958126, "lng": -122.30015132473687}, {
                "lat": 47.529716165662634,
                "lng": -122.30067381551777
            }, {"lat": 47.53185108352309, "lng": -122.30549686205501}, {
                "lat": 47.53194500360682,
                "lng": -122.31857771062471
            }, {"lat": 47.544413260125374, "lng": -122.33685494850062}, {
                "lat": 47.56610172898548,
                "lng": -122.34562132529857
            }, {"lat": 47.57064556343437, "lng": -122.34563597127612}, {
                "lat": 47.57449447328415,
                "lng": -122.34256045694963
            }, {"lat": 47.586712311655745, "lng": -122.34311260643614}]
        }
        //{
        //    id: 7,
        //    name: '7',
        //    path: []
        //}
    ];

    angular.module('demoApp')
        .value('ZONES', zones)
    ;

}());



(function () {
    'use strict';

    var truckHQ = [
        {
            id: 1,
            zone_id: 1,
            no_of_trucks: 5,
            location: {lat: 47.671918739454114, lng: -122.36743927001953}
        },
        {
            id: 2,
            zone_id: 2,
            no_of_trucks: 5,
            location: {lat: 47.67983622284604, lng: -122.29491233825684}
        },
        {
            id: 3,
            zone_id: 3,
            no_of_trucks: 5,
            location: {lat: 47.63925365016244, lng: -122.39469051361084}
        },
        {
            id: 4,
            zone_id: 4,
            no_of_trucks: 5,
            location: {lat: 47.61545019698576, lng: -122.3124647140503}
        },
        {
            id: 5,
            zone_id: 5,
            no_of_trucks: 5,
            location: {lat: 47.557617362794026, lng: -122.38106489181519}
        },
        {
            id: 6,
            zone_id: 6,
            no_of_trucks: 5,
            location: {lat: 47.56213513916552, lng: -122.32317209243774}
        },
    ];

    angular.module('demoApp')
        .value('TRUCK_HQ', truckHQ)
        .value('TRUCK_ICON', '/resources/images/markers/truck.png')
    ;

}());



(function () {
    'use strict';

    var seattleBorder = [
        {lat: 47.568261, lng: -122.409436},
        {lat: 47.56892, lng: -122.409839},
        {lat: 47.572347, lng: -122.415292},
        {lat: 47.57602, lng: -122.421139},
        {lat: 47.576957, lng: -122.418849},
        {lat: 47.579239, lng: -122.413275},
        {lat: 47.579789, lng: -122.41193},
        {lat: 47.582087, lng: -122.406316},
        {lat: 47.582989, lng: -122.404115},
        {lat: 47.58392, lng: -122.401839},
        {lat: 47.588563, lng: -122.396054},
        {lat: 47.59572, lng: -122.387139},
        {lat: 47.594716, lng: -122.386023},
        {lat: 47.593696, lng: -122.384889},
        {lat: 47.587464, lng: -122.377959},
        {lat: 47.585816, lng: -122.376127},
        {lat: 47.585181, lng: -122.375421},
        {lat: 47.583087, lng: -122.370167},
        {lat: 47.584568, lng: -122.359973},
        {lat: 47.58482, lng: -122.358238},
        {lat: 47.59048, lng: -122.344705},
        {lat: 47.590636, lng: -122.344332},
        {lat: 47.59122, lng: -122.342937},
        {lat: 47.599113, lng: -122.339513},
        {lat: 47.59922, lng: -122.339571},
        {lat: 47.60217, lng: -122.34117},
        {lat: 47.607744, lng: -122.344191},
        {lat: 47.60912, lng: -122.344937},
        {lat: 47.609121, lng: -122.344938},
        {lat: 47.609774, lng: -122.345928},
        {lat: 47.610007, lng: -122.346282},
        {lat: 47.611596, lng: -122.34869},
        {lat: 47.612268, lng: -122.34971},
        {lat: 47.613044, lng: -122.350886},
        {lat: 47.613634, lng: -122.35178},
        {lat: 47.615404, lng: -122.354463},
        {lat: 47.618586, lng: -122.359288},
        {lat: 47.619835, lng: -122.361182},
        {lat: 47.622157, lng: -122.364702},
        {lat: 47.624213, lng: -122.367819},
        {lat: 47.625302, lng: -122.370462},
        {lat: 47.631325, lng: -122.38508},
        {lat: 47.63172, lng: -122.386039},
        {lat: 47.631475, lng: -122.388736},
        {lat: 47.631389, lng: -122.389683},
        {lat: 47.631022, lng: -122.393717},
        {lat: 47.63102, lng: -122.393739},
        {lat: 47.632438, lng: -122.398872},
        {lat: 47.63392, lng: -122.40424},
        {lat: 47.638583, lng: -122.412539},
        {lat: 47.639766, lng: -122.414645},
        {lat: 47.642604, lng: -122.416896},
        {lat: 47.644963, lng: -122.418768},
        {lat: 47.650348, lng: -122.423041},
        {lat: 47.651318, lng: -122.423811},
        {lat: 47.658919, lng: -122.429841},
        {lat: 47.675012, lng: -122.41314},
        {lat: 47.675851, lng: -122.41227},
        {lat: 47.680119, lng: -122.407841},
        {lat: 47.68672, lng: -122.405002},
        {lat: 47.689419, lng: -122.403841},
        {lat: 47.692813, lng: -122.40089},
        {lat: 47.697409, lng: -122.396894},
        {lat: 47.697511, lng: -122.396805},
        {lat: 47.698716, lng: -122.395757},
        {lat: 47.699838, lng: -122.394781},
        {lat: 47.701602, lng: -122.393248},
        {lat: 47.708937, lng: -122.380751},
        {lat: 47.709119, lng: -122.38044},
        {lat: 47.712329, lng: -122.378705},
        {lat: 47.716519, lng: -122.37644},
        {lat: 47.719724, lng: -122.375607},
        {lat: 47.729219, lng: -122.37314},
        {lat: 47.73391, lng: -122.37538},
        {lat: 47.733919, lng: -122.37494},
        {lat: 47.733924, lng: -122.374376},
        {lat: 47.734145, lng: -122.361959},
        {lat: 47.734139, lng: -122.360931},
        {lat: 47.734129, lng: -122.355572},
        {lat: 47.734128, lng: -122.351774},
        {lat: 47.734127, lng: -122.347803},
        {lat: 47.734127, lng: -122.345098},
        {lat: 47.734131, lng: -122.339688},
        {lat: 47.734133, lng: -122.336983},
        {lat: 47.734134, lng: -122.335926},
        {lat: 47.734135, lng: -122.334277},
        {lat: 47.734061, lng: -122.324734},
        {lat: 47.734052, lng: -122.323589},
        {lat: 47.734026, lng: -122.320801},
        {lat: 47.733975, lng: -122.315443},
        {lat: 47.73395, lng: -122.31275},
        {lat: 47.733904, lng: -122.308696},
        {lat: 47.733876, lng: -122.306171},
        {lat: 47.733828, lng: -122.301955},
        {lat: 47.733806, lng: -122.29923},
        {lat: 47.733784, lng: -122.29652},
        {lat: 47.733751, lng: -122.292435},
        {lat: 47.733732, lng: -122.289753},
        {lat: 47.733724, lng: -122.286711},
        {lat: 47.733732, lng: -122.285957},
        {lat: 47.733683, lng: -122.285799},
        {lat: 47.733648, lng: -122.284471},
        {lat: 47.733612, lng: -122.283533},
        {lat: 47.73361, lng: -122.281953},
        {lat: 47.733477, lng: -122.269808},
        {lat: 47.726404, lng: -122.2684},
        {lat: 47.71916, lng: -122.267192},
        {lat: 47.71882, lng: -122.267136},
        {lat: 47.705987, lng: -122.259741},
        {lat: 47.704544, lng: -122.25875},
        {lat: 47.69782, lng: -122.254136},
        {lat: 47.69222, lng: -122.243935},
        {lat: 47.69012, lng: -122.231835},
        {lat: 47.684915, lng: -122.230579},
        {lat: 47.66692, lng: -122.226235},
        {lat: 47.66412, lng: -122.231435},
        {lat: 47.6577, lng: -122.240259},
        {lat: 47.64712, lng: -122.255735},
        {lat: 47.640299, lng: -122.259125},
        {lat: 47.63699, lng: -122.260051},
        {lat: 47.632008, lng: -122.26142},
        {lat: 47.62432, lng: -122.263535},
        {lat: 47.621146, lng: -122.264187},
        {lat: 47.61362, lng: -122.265735},
        {lat: 47.601521, lng: -122.267635},
        {lat: 47.590821, lng: -122.268135},
        {lat: 47.589527, lng: -122.26816},
        {lat: 47.583974, lng: -122.265745},
        {lat: 47.581752, lng: -122.264749},
        {lat: 47.575921, lng: -122.262134},
        {lat: 47.566847, lng: -122.254496},
        {lat: 47.563921, lng: -122.252034},
        {lat: 47.562521, lng: -122.250034},
        {lat: 47.559621, lng: -122.244034},
        {lat: 47.555421, lng: -122.240934},
        {lat: 47.553572, lng: -122.241509},
        {lat: 47.549321, lng: -122.242834},
        {lat: 47.545636, lng: -122.245278},
        {lat: 47.540302, lng: -122.248818},
        {lat: 47.538513, lng: -122.249711},
        {lat: 47.538139, lng: -122.24969},
        {lat: 47.537512, lng: -122.249654},
        {lat: 47.531821, lng: -122.249333},
        {lat: 47.522921, lng: -122.240733},
        {lat: 47.521323, lng: -122.23807},
        {lat: 47.518421, lng: -122.233233},
        {lat: 47.512421, lng: -122.226033},
        {lat: 47.509421, lng: -122.224433},
        {lat: 47.509513, lng: -122.235294},
        {lat: 47.509524, lng: -122.237053},
        {lat: 47.509519, lng: -122.238194},
        {lat: 47.509544, lng: -122.238425},
        {lat: 47.509528, lng: -122.238806},
        {lat: 47.509557, lng: -122.238919},
        {lat: 47.509646, lng: -122.245039},
        {lat: 47.509728, lng: -122.245787},
        {lat: 47.509646, lng: -122.247347},
        {lat: 47.507269, lng: -122.24611},
        {lat: 47.503056, lng: -122.245635},
        {lat: 47.503553, lng: -122.248001},
        {lat: 47.50638, lng: -122.247939},
        {lat: 47.506376, lng: -122.248866},
        {lat: 47.502998, lng: -122.249004},
        {lat: 47.502904, lng: -122.24238},
        {lat: 47.502883, lng: -122.240819},
        {lat: 47.502227, lng: -122.240828},
        {lat: 47.501466, lng: -122.240836},
        {lat: 47.499245, lng: -122.24087},
        {lat: 47.499343, lng: -122.249635},
        {lat: 47.502219, lng: -122.250506},
        {lat: 47.502831, lng: -122.250814},
        {lat: 47.502537, lng: -122.259515},
        {lat: 47.501306, lng: -122.259529},
        {lat: 47.495987, lng: -122.259638},
        {lat: 47.495601, lng: -122.259643},
        {lat: 47.495605, lng: -122.268528},
        {lat: 47.495642, lng: -122.269413},
        {lat: 47.495648, lng: -122.270304},
        {lat: 47.497002, lng: -122.270283},
        {lat: 47.501468, lng: -122.270264},
        {lat: 47.502629, lng: -122.270202},
        {lat: 47.504475, lng: -122.270166},
        {lat: 47.507025, lng: -122.270125},
        {lat: 47.509663, lng: -122.270069},
        {lat: 47.509753, lng: -122.274076},
        {lat: 47.509784, lng: -122.275411},
        {lat: 47.506927, lng: -122.275432},
        {lat: 47.507987, lng: -122.278341},
        {lat: 47.509806, lng: -122.278418},
        {lat: 47.510045, lng: -122.283036},
        {lat: 47.510221, lng: -122.28577},
        {lat: 47.510153, lng: -122.291369},
        {lat: 47.519259, lng: -122.291264},
        {lat: 47.524114, lng: -122.291265},
        {lat: 47.524382, lng: -122.291268},
        {lat: 47.524379, lng: -122.291344},
        {lat: 47.524422, lng: -122.293634},
        {lat: 47.524593, lng: -122.30181},
        {lat: 47.525775, lng: -122.300145},
        {lat: 47.529385, lng: -122.301416},
        {lat: 47.531532, lng: -122.305433},
        {lat: 47.531767, lng: -122.317958},
        {lat: 47.531765, lng: -122.31803},
        {lat: 47.531766, lng: -122.318354},
        {lat: 47.531762, lng: -122.318446},
        {lat: 47.529389, lng: -122.318441},
        {lat: 47.529413, lng: -122.317575},
        {lat: 47.529169, lng: -122.317568},
        {lat: 47.528549, lng: -122.317599},
        {lat: 47.52821, lng: -122.317554},
        {lat: 47.527298, lng: -122.31757},
        {lat: 47.526583, lng: -122.311887},
        {lat: 47.524287, lng: -122.309715},
        {lat: 47.522185, lng: -122.309677},
        {lat: 47.522222, lng: -122.317656},
        {lat: 47.520203, lng: -122.31771},
        {lat: 47.518754, lng: -122.31773},
        {lat: 47.518691, lng: -122.325879},
        {lat: 47.52092, lng: -122.325876},
        {lat: 47.520913, lng: -122.329592},
        {lat: 47.520906, lng: -122.330073},
        {lat: 47.520968, lng: -122.330603},
        {lat: 47.520987, lng: -122.330966},
        {lat: 47.517982, lng: -122.329514},
        {lat: 47.51755, lng: -122.329502},
        {lat: 47.517499, lng: -122.329422},
        {lat: 47.517225, lng: -122.329177},
        {lat: 47.516505, lng: -122.328639},
        {lat: 47.51393, lng: -122.327291},
        {lat: 47.513929, lng: -122.328529},
        {lat: 47.515121, lng: -122.331153},
        {lat: 47.514691, lng: -122.333502},
        {lat: 47.514499, lng: -122.333492},
        {lat: 47.514499, lng: -122.334353},
        {lat: 47.513897, lng: -122.334252},
        {lat: 47.513893, lng: -122.33704},
        {lat: 47.517258, lng: -122.337485},
        {lat: 47.517269, lng: -122.339915},
        {lat: 47.517277, lng: -122.340134},
        {lat: 47.51722, lng: -122.34075},
        {lat: 47.517276, lng: -122.341437},
        {lat: 47.517281, lng: -122.34161},
        {lat: 47.517287, lng: -122.342878},
        {lat: 47.517293, lng: -122.343873},
        {lat: 47.51738, lng: -122.355167},
        {lat: 47.517347, lng: -122.358557},
        {lat: 47.515528, lng: -122.360495},
        {lat: 47.51736, lng: -122.360542},
        {lat: 47.517361, lng: -122.36262},
        {lat: 47.517362, lng: -122.36457},
        {lat: 47.517424, lng: -122.3714},
        {lat: 47.513705, lng: -122.371104},
        {lat: 47.512047, lng: -122.370984},
        {lat: 47.509458, lng: -122.37086},
        {lat: 47.508199, lng: -122.370877},
        {lat: 47.506409, lng: -122.370465},
        {lat: 47.505503, lng: -122.370449},
        {lat: 47.502778, lng: -122.371413},
        {lat: 47.499221, lng: -122.374278},
        {lat: 47.497659, lng: -122.37485},
        {lat: 47.49732, lng: -122.375024},
        {lat: 47.496434, lng: -122.375652},
        {lat: 47.495749, lng: -122.376601},
        {lat: 47.495915, lng: -122.376859},
        {lat: 47.499443, lng: -122.382331},
        {lat: 47.50222, lng: -122.386637},
        {lat: 47.506514, lng: -122.389907},
        {lat: 47.513856, lng: -122.395499},
        {lat: 47.51522, lng: -122.396538},
        {lat: 47.520154, lng: -122.395202},
        {lat: 47.523201, lng: -122.394377},
        {lat: 47.52482, lng: -122.393938},
        {lat: 47.525763, lng: -122.394102},
        {lat: 47.52686, lng: -122.394293},
        {lat: 47.532292, lng: -122.395238},
        {lat: 47.535875, lng: -122.395861},
        {lat: 47.539917, lng: -122.396564},
        {lat: 47.54499, lng: -122.397446},
        {lat: 47.55012, lng: -122.398338},
        {lat: 47.550384, lng: -122.398499},
        {lat: 47.559597, lng: -122.404135},
        {lat: 47.560805, lng: -122.404875},
        {lat: 47.562728, lng: -122.406051},
        {lat: 47.563476, lng: -122.406509},
        {lat: 47.565525, lng: -122.407762},
        {lat: 47.567518, lng: -122.408981},
        {lat: 47.568261, lng: -122.409436}
    ];

    angular.module('demoApp')
        .value('SEATTLE_BORDER', seattleBorder)
    ;

}());


